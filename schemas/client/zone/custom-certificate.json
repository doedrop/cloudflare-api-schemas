{
    "id": "https://api.cloudflare.com/schemas/v4/client/zone/custom-certificate.json",
    "title": "Custom SSL for a Zone",
    "description": "Custom SSL certificate for a zone",
    "type": "object",
    "extraProperties": {
        "keyless_server": {
            "id": "https://api.cloudflare.com/schemas/v4/client/zone/keyless-certificate.json",
            "$schema": "http://json-schema.org/draft-04/hyper-schema#",
            "title": "Keyless SSL for a Zone",
            "description": "A Keyless certificate is an SSL certificate where the SSL private key is not stored on Cloudflare",
            "type": "object",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "id",
                        "name",
                        "host",
                        "port",
                        "status",
                        "enabled",
                        "permissions",
                        "created_on",
                        "modified_on"
                    ],
                    "properties": {
                        "id": {
                            "description": "Keyless certificate identifier tag",
                            "type": "string",
                            "maxLength": 32,
                            "readOnly": true,
                            "example": "4d2844d2ce78891c34d0b6c0535a291e"
                        },
                        "name": {
                            "type": "string",
                            "description": "The keyless SSL name",
                            "maxLength": 180,
                            "readOnly": true,
                            "example": "example.com Keyless SSL"
                        },
                        "host": {
                            "type": "string",
                            "pattern": "hostname_or_ip",
                            "description": "The keyless SSL name",
                            "maxLength": 253,
                            "example": "example.com"
                        },
                        "port": {
                            "type": "number",
                            "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                            "maxLength": 65535,
                            "default": 24008,
                            "example": 24008
                        },
                        "status": {
                            "type": "string",
                            "enum": [
                                "active",
                                "deleted"
                            ],
                            "description": "Status of the Keyless SSL",
                            "readOnly": true,
                            "example": "active"
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not the Keyless SSL is on or off",
                            "readOnly": true,
                            "example": false
                        },
                        "permissions": {
                            "description": "Available permissions for the Keyless SSL for the current user requesting the item",
                            "readOnly": true,
                            "type": "array",
                            "example": [
                                "#ssl:read",
                                "#ssl:edit"
                            ]
                        },
                        "created_on": {
                            "readOnly": true,
                            "type": "string",
                            "format": "date-time",
                            "example": "2014-01-01T05:20:00Z",
                            "description": "When the Keyless SSL was created"
                        },
                        "modified_on": {
                            "readOnly": true,
                            "type": "string",
                            "format": "date-time",
                            "example": "2014-01-01T05:20:00Z",
                            "description": "When the Keyless SSL was last modified"
                        }
                    }
                }
            ],
            "definitions": {
                "identifier": {
                    "description": "Keyless certificate identifier tag",
                    "type": "string",
                    "maxLength": 32,
                    "readOnly": true,
                    "example": "4d2844d2ce78891c34d0b6c0535a291e"
                },
                "name": {
                    "type": "string",
                    "description": "The keyless SSL name",
                    "maxLength": 180,
                    "readOnly": true,
                    "example": "example.com Keyless SSL"
                },
                "host": {
                    "type": "string",
                    "pattern": "hostname_or_ip",
                    "description": "The keyless SSL name",
                    "maxLength": 253,
                    "example": "example.com"
                },
                "port": {
                    "type": "number",
                    "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                    "maxLength": 65535,
                    "default": 24008,
                    "example": 24008
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "deleted"
                    ],
                    "description": "Status of the Keyless SSL",
                    "readOnly": true,
                    "example": "active"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the Keyless SSL is on or off",
                    "readOnly": true,
                    "example": false
                },
                "certificate": {
                    "type": "string",
                    "description": "The zone's SSL certificate or SSL certificate and intermediate(s)",
                    "example": "-----BEGIN CERTIFICATE----- MIIDtTCCAp2gAwIBAgIJAM15n7fdxhRtMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV BAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX aWRnaXRzIFB0eSBMdGQwHhcNMTQwMzExMTkyMTU5WhcNMTQwNDEwMTkyMTU5WjBF MQswCQYDVQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50 ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB CgKCAQEAvq3sKsHpeduJHimOK+fvQdKsI8z8A05MZyyLp2/R/GE8FjNv+hkVY1WQ LIyTNNQH7CJecE1nbTfo8Y56S7x/rhxC6/DJ8MIulapFPnorq46KU6yRxiM0MQ3N nTJHlHA2ozZta6YBBfVfhHWl1F0IfNbXCLKvGwWWMbCx43OfW6KTkbRnE6gFWKuO fSO5h2u5TaWVuSIzBvYs7Vza6m+gtYAvKAJV2nSZ+eSEFPDo29corOy8+huEOUL8 5FAw4BFPsr1TlrlGPFitduQUHGrSL7skk1ESGza0to3bOtrodKei2s9bk5MXm7lZ qI+WZJX4Zu9+mzZhc9pCVi8r/qlXuQIDAQABo4GnMIGkMB0GA1UdDgQWBBRvavf+ sWM4IwKiH9X9w1vl6nUVRDB1BgNVHSMEbjBsgBRvavf+sWM4IwKiH9X9w1vl6nUV RKFJpEcwRTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV BAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAM15n7fdxhRtMAwGA1UdEwQF MAMBAf8wDQYJKoZIhvcNAQEFBQADggEBABY2ZzBaW0dMsAAT7tPJzrVWVzQx6KU4 UEBLudIlWPlkAwTnINCWR/8eNjCCmGA4heUdHmazdpPa8RzwOmc0NT1NQqzSyktt vTqb4iHD7+8f9MqJ9/FssCfTtqr/Qst/hGH4Wmdf1EJ/6FqYAAb5iRlPgshFZxU8 uXtA8hWn6fK6eISD9HBdcAFToUvKNZ1BIDPvh9f95Ine8ar6yGd56TUNrHR8eHBs ESxz5ddVR/oWRysNJ+aGAyYqHS8S/ttmC7r4XCAHqXptkHPCGRqkAhsterYhd4I8 /cBzejUobNCjjHFbtkAL/SjxZOLW+pNkZwfeYdM8iPkD54Uua1v2tdw= -----END CERTIFICATE-----"
                },
                "bundle_method": {
                    "type": "string",
                    "enum": [
                        "ubiquitous",
                        "optimal",
                        "force"
                    ],
                    "description": "A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.",
                    "example": "ubiquitous",
                    "default": "ubiquitous"
                },
                "base": {
                    "type": "object",
                    "required": [
                        "id",
                        "name",
                        "host",
                        "port",
                        "status",
                        "enabled",
                        "permissions",
                        "created_on",
                        "modified_on"
                    ],
                    "properties": {
                        "id": {
                            "description": "Keyless certificate identifier tag",
                            "type": "string",
                            "maxLength": 32,
                            "readOnly": true,
                            "example": "4d2844d2ce78891c34d0b6c0535a291e"
                        },
                        "name": {
                            "type": "string",
                            "description": "The keyless SSL name",
                            "maxLength": 180,
                            "readOnly": true,
                            "example": "example.com Keyless SSL"
                        },
                        "host": {
                            "type": "string",
                            "pattern": "hostname_or_ip",
                            "description": "The keyless SSL name",
                            "maxLength": 253,
                            "example": "example.com"
                        },
                        "port": {
                            "type": "number",
                            "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                            "maxLength": 65535,
                            "default": 24008,
                            "example": 24008
                        },
                        "status": {
                            "type": "string",
                            "enum": [
                                "active",
                                "deleted"
                            ],
                            "description": "Status of the Keyless SSL",
                            "readOnly": true,
                            "example": "active"
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not the Keyless SSL is on or off",
                            "readOnly": true,
                            "example": false
                        },
                        "permissions": {
                            "description": "Available permissions for the Keyless SSL for the current user requesting the item",
                            "readOnly": true,
                            "type": "array",
                            "example": [
                                "#ssl:read",
                                "#ssl:edit"
                            ]
                        },
                        "created_on": {
                            "readOnly": true,
                            "type": "string",
                            "format": "date-time",
                            "example": "2014-01-01T05:20:00Z",
                            "description": "When the Keyless SSL was created"
                        },
                        "modified_on": {
                            "readOnly": true,
                            "type": "string",
                            "format": "date-time",
                            "example": "2014-01-01T05:20:00Z",
                            "description": "When the Keyless SSL was last modified"
                        }
                    }
                },
                "keyless_response_single": {
                    "allOf": [
                        {
                            "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                            "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                            "description": "Schema for an API response from Cloudflare that contains a single result object",
                            "type": "object",
                            "allOf": [
                                {
                                    "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                    "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                    "description": "Common schema for all Cloudflare v4 API responses",
                                    "type": "object",
                                    "required": [
                                        "success",
                                        "errors",
                                        "messages",
                                        "result"
                                    ],
                                    "oneOf": [
                                        {
                                            "$comment": "This subschema describes successful responses",
                                            "properties": {
                                                "success": {
                                                    "description": "Whether the API call was successful or not",
                                                    "type": "boolean",
                                                    "enum": [
                                                        true
                                                    ],
                                                    "example": true
                                                },
                                                "errors": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                },
                                                "messages": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                },
                                                "result": {
                                                    "type": [
                                                        "object",
                                                        "array",
                                                        "string"
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "$comment": "This subschema describes failure responses",
                                            "properties": {
                                                "success": {
                                                    "description": "Whether the API call was successful or not",
                                                    "type": "boolean",
                                                    "enum": [
                                                        false
                                                    ],
                                                    "example": false
                                                },
                                                "errors": {
                                                    "allOf": [
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        }
                                                    ],
                                                    "minLength": 1,
                                                    "example": [
                                                        {
                                                            "code": 7003,
                                                            "message": "No route for the URI"
                                                        }
                                                    ]
                                                },
                                                "messages": {
                                                    "allOf": [
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        }
                                                    ],
                                                    "example": []
                                                },
                                                "result": {
                                                    "type": "null",
                                                    "enum": [
                                                        null
                                                    ],
                                                    "example": null
                                                }
                                            }
                                        }
                                    ],
                                    "definitions": {
                                        "messages": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "required": [
                                                    "code",
                                                    "message"
                                                ],
                                                "properties": {
                                                    "code": {
                                                        "type": "integer",
                                                        "minimum": 1000
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "uniqueItems": true
                                            },
                                            "example": []
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "result": {
                                            "type": [
                                                "object",
                                                "string",
                                                "null"
                                            ]
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            "properties": {
                                "result": {
                                    "type": "object",
                                    "cfRecurse": ""
                                }
                            }
                        }
                    ]
                },
                "keyless_response_single_id": {
                    "allOf": [
                        {
                            "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                            "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                            "description": "Schema for an API response from Cloudflare that contains a single result object",
                            "type": "object",
                            "allOf": [
                                {
                                    "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                    "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                    "description": "Common schema for all Cloudflare v4 API responses",
                                    "type": "object",
                                    "required": [
                                        "success",
                                        "errors",
                                        "messages",
                                        "result"
                                    ],
                                    "oneOf": [
                                        {
                                            "$comment": "This subschema describes successful responses",
                                            "properties": {
                                                "success": {
                                                    "description": "Whether the API call was successful or not",
                                                    "type": "boolean",
                                                    "enum": [
                                                        true
                                                    ],
                                                    "example": true
                                                },
                                                "errors": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                },
                                                "messages": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                },
                                                "result": {
                                                    "type": [
                                                        "object",
                                                        "array",
                                                        "string"
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "$comment": "This subschema describes failure responses",
                                            "properties": {
                                                "success": {
                                                    "description": "Whether the API call was successful or not",
                                                    "type": "boolean",
                                                    "enum": [
                                                        false
                                                    ],
                                                    "example": false
                                                },
                                                "errors": {
                                                    "allOf": [
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        }
                                                    ],
                                                    "minLength": 1,
                                                    "example": [
                                                        {
                                                            "code": 7003,
                                                            "message": "No route for the URI"
                                                        }
                                                    ]
                                                },
                                                "messages": {
                                                    "allOf": [
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        }
                                                    ],
                                                    "example": []
                                                },
                                                "result": {
                                                    "type": "null",
                                                    "enum": [
                                                        null
                                                    ],
                                                    "example": null
                                                }
                                            }
                                        }
                                    ],
                                    "definitions": {
                                        "messages": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "required": [
                                                    "code",
                                                    "message"
                                                ],
                                                "properties": {
                                                    "code": {
                                                        "type": "integer",
                                                        "minimum": 1000
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "uniqueItems": true
                                            },
                                            "example": []
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "result": {
                                            "type": [
                                                "object",
                                                "string",
                                                "null"
                                            ]
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            "properties": {
                                "result": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "description": "Keyless certificate identifier tag",
                                            "type": "string",
                                            "maxLength": 32,
                                            "readOnly": true,
                                            "example": "4d2844d2ce78891c34d0b6c0535a291e"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                },
                "keyless_response_collection": {
                    "allOf": [
                        {
                            "id": "https://api.cloudflare.com/schemas/v4/common/api-response-collection.json",
                            "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                            "description": "Schema for an API response from Cloudflare that contains multiple result objects",
                            "type": "object",
                            "anyOf": [
                                {
                                    "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                    "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                    "description": "Common schema for all Cloudflare v4 API responses",
                                    "type": "object",
                                    "required": [
                                        "success",
                                        "errors",
                                        "messages",
                                        "result"
                                    ],
                                    "oneOf": [
                                        {
                                            "$comment": "This subschema describes successful responses",
                                            "properties": {
                                                "success": {
                                                    "description": "Whether the API call was successful or not",
                                                    "type": "boolean",
                                                    "enum": [
                                                        true
                                                    ],
                                                    "example": true
                                                },
                                                "errors": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                },
                                                "messages": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                },
                                                "result": {
                                                    "type": [
                                                        "object",
                                                        "array",
                                                        "string"
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "$comment": "This subschema describes failure responses",
                                            "properties": {
                                                "success": {
                                                    "description": "Whether the API call was successful or not",
                                                    "type": "boolean",
                                                    "enum": [
                                                        false
                                                    ],
                                                    "example": false
                                                },
                                                "errors": {
                                                    "allOf": [
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        }
                                                    ],
                                                    "minLength": 1,
                                                    "example": [
                                                        {
                                                            "code": 7003,
                                                            "message": "No route for the URI"
                                                        }
                                                    ]
                                                },
                                                "messages": {
                                                    "allOf": [
                                                        {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        }
                                                    ],
                                                    "example": []
                                                },
                                                "result": {
                                                    "type": "null",
                                                    "enum": [
                                                        null
                                                    ],
                                                    "example": null
                                                }
                                            }
                                        }
                                    ],
                                    "definitions": {
                                        "messages": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "required": [
                                                    "code",
                                                    "message"
                                                ],
                                                "properties": {
                                                    "code": {
                                                        "type": "integer",
                                                        "minimum": 1000
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "uniqueItems": true
                                            },
                                            "example": []
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "result": {
                                            "type": [
                                                "array",
                                                "null"
                                            ]
                                        },
                                        "result_info": {
                                            "type": "object",
                                            "properties": {
                                                "page": {
                                                    "description": "Current page within paginated list of results",
                                                    "type": "number",
                                                    "example": 1
                                                },
                                                "per_page": {
                                                    "description": "Number of results per page of results",
                                                    "type": "number",
                                                    "example": 20
                                                },
                                                "count": {
                                                    "description": "Total results returned based on your search parameters",
                                                    "type": "number",
                                                    "example": 1
                                                },
                                                "total_count": {
                                                    "description": "Total results available without any search parameters",
                                                    "type": "number",
                                                    "example": 2000
                                                }
                                            }
                                        }
                                    }
                                }
                            ],
                            "definitions": {
                                "params": {
                                    "type": "object",
                                    "properties": {
                                        "page": {
                                            "description": "Requested page within paginated list of results",
                                            "type": "number",
                                            "example": 1
                                        },
                                        "per_page": {
                                            "description": "Maximum number of results requested",
                                            "type": "number",
                                            "example": 20
                                        }
                                    }
                                },
                                "result_info": {
                                    "type": "object",
                                    "properties": {
                                        "page": {
                                            "description": "Current page within paginated list of results",
                                            "type": "number",
                                            "example": 1
                                        },
                                        "per_page": {
                                            "description": "Number of results per page of results",
                                            "type": "number",
                                            "example": 20
                                        },
                                        "count": {
                                            "description": "Total results returned based on your search parameters",
                                            "type": "number",
                                            "example": 1
                                        },
                                        "total_count": {
                                            "description": "Total results available without any search parameters",
                                            "type": "number",
                                            "example": 2000
                                        }
                                    }
                                }
                            }
                        },
                        {
                            "properties": {
                                "result": {
                                    "type": "array",
                                    "items": {
                                        "cfRecurse": ""
                                    }
                                }
                            }
                        }
                    ]
                },
                "zone_identifier": {
                    "description": "Zone identifier tag",
                    "type": "string",
                    "maxLength": 32,
                    "readOnly": true,
                    "example": "023e105f4ecef8ad9ca31a8372d0c353"
                }
            },
            "links": [
                {
                    "title": "List Keyless SSL Configurations",
                    "description": "List all Keyless SSL configurations for a given zone",
                    "rel": "collection",
                    "href": "zones/{#/definitions/zone_identifier}/keyless_certificates",
                    "method": "GET",
                    "targetSchema": {
                        "allOf": [
                            {
                                "id": "https://api.cloudflare.com/schemas/v4/common/api-response-collection.json",
                                "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                "description": "Schema for an API response from Cloudflare that contains multiple result objects",
                                "type": "object",
                                "anyOf": [
                                    {
                                        "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                        "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                        "description": "Common schema for all Cloudflare v4 API responses",
                                        "type": "object",
                                        "required": [
                                            "success",
                                            "errors",
                                            "messages",
                                            "result"
                                        ],
                                        "oneOf": [
                                            {
                                                "$comment": "This subschema describes successful responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            true
                                                        ],
                                                        "example": true
                                                    },
                                                    "errors": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "messages": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": [
                                                            "object",
                                                            "array",
                                                            "string"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "$comment": "This subschema describes failure responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            false
                                                        ],
                                                        "example": false
                                                    },
                                                    "errors": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "minLength": 1,
                                                        "example": [
                                                            {
                                                                "code": 7003,
                                                                "message": "No route for the URI"
                                                            }
                                                        ]
                                                    },
                                                    "messages": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": "null",
                                                        "enum": [
                                                            null
                                                        ],
                                                        "example": null
                                                    }
                                                }
                                            }
                                        ],
                                        "definitions": {
                                            "messages": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "code",
                                                        "message"
                                                    ],
                                                    "properties": {
                                                        "code": {
                                                            "type": "integer",
                                                            "minimum": 1000
                                                        },
                                                        "message": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "example": []
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "result": {
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "result_info": {
                                                "type": "object",
                                                "properties": {
                                                    "page": {
                                                        "description": "Current page within paginated list of results",
                                                        "type": "number",
                                                        "example": 1
                                                    },
                                                    "per_page": {
                                                        "description": "Number of results per page of results",
                                                        "type": "number",
                                                        "example": 20
                                                    },
                                                    "count": {
                                                        "description": "Total results returned based on your search parameters",
                                                        "type": "number",
                                                        "example": 1
                                                    },
                                                    "total_count": {
                                                        "description": "Total results available without any search parameters",
                                                        "type": "number",
                                                        "example": 2000
                                                    }
                                                }
                                            }
                                        }
                                    }
                                ],
                                "definitions": {
                                    "params": {
                                        "type": "object",
                                        "properties": {
                                            "page": {
                                                "description": "Requested page within paginated list of results",
                                                "type": "number",
                                                "example": 1
                                            },
                                            "per_page": {
                                                "description": "Maximum number of results requested",
                                                "type": "number",
                                                "example": 20
                                            }
                                        }
                                    },
                                    "result_info": {
                                        "type": "object",
                                        "properties": {
                                            "page": {
                                                "description": "Current page within paginated list of results",
                                                "type": "number",
                                                "example": 1
                                            },
                                            "per_page": {
                                                "description": "Number of results per page of results",
                                                "type": "number",
                                                "example": 20
                                            },
                                            "count": {
                                                "description": "Total results returned based on your search parameters",
                                                "type": "number",
                                                "example": 1
                                            },
                                            "total_count": {
                                                "description": "Total results available without any search parameters",
                                                "type": "number",
                                                "example": 2000
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "result": {
                                        "type": "array",
                                        "items": {
                                            "cfRecurse": ""
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "cfOwnership": "ssl",
                    "cfPlanAvailability": {
                        "free": false,
                        "pro": false,
                        "business": false,
                        "enterprise": true
                    },
                    "cfPermissionsRequired": {
                        "enum": [
                            "#ssl:read"
                        ]
                    }
                },
                {
                    "title": "Create Keyless SSL Configuration",
                    "rel": "collection",
                    "href": "zones/{#/definitions/zone_identifier}/keyless_certificates",
                    "method": "POST",
                    "schema": {
                        "type": "object",
                        "required": [
                            "host",
                            "port",
                            "certificate"
                        ],
                        "properties": {
                            "host": {
                                "type": "string",
                                "pattern": "hostname_or_ip",
                                "description": "The keyless SSL name",
                                "maxLength": 253,
                                "example": "example.com"
                            },
                            "port": {
                                "type": "number",
                                "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                                "maxLength": 65535,
                                "default": 24008,
                                "example": 24008
                            },
                            "name": {
                                "type": "string",
                                "description": "The keyless SSL name",
                                "maxLength": 180,
                                "readOnly": true,
                                "example": "example.com Keyless SSL"
                            },
                            "certificate": {
                                "type": "string",
                                "description": "The zone's SSL certificate or SSL certificate and intermediate(s)",
                                "example": "-----BEGIN CERTIFICATE----- MIIDtTCCAp2gAwIBAgIJAM15n7fdxhRtMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV BAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX aWRnaXRzIFB0eSBMdGQwHhcNMTQwMzExMTkyMTU5WhcNMTQwNDEwMTkyMTU5WjBF MQswCQYDVQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50 ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB CgKCAQEAvq3sKsHpeduJHimOK+fvQdKsI8z8A05MZyyLp2/R/GE8FjNv+hkVY1WQ LIyTNNQH7CJecE1nbTfo8Y56S7x/rhxC6/DJ8MIulapFPnorq46KU6yRxiM0MQ3N nTJHlHA2ozZta6YBBfVfhHWl1F0IfNbXCLKvGwWWMbCx43OfW6KTkbRnE6gFWKuO fSO5h2u5TaWVuSIzBvYs7Vza6m+gtYAvKAJV2nSZ+eSEFPDo29corOy8+huEOUL8 5FAw4BFPsr1TlrlGPFitduQUHGrSL7skk1ESGza0to3bOtrodKei2s9bk5MXm7lZ qI+WZJX4Zu9+mzZhc9pCVi8r/qlXuQIDAQABo4GnMIGkMB0GA1UdDgQWBBRvavf+ sWM4IwKiH9X9w1vl6nUVRDB1BgNVHSMEbjBsgBRvavf+sWM4IwKiH9X9w1vl6nUV RKFJpEcwRTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV BAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAM15n7fdxhRtMAwGA1UdEwQF MAMBAf8wDQYJKoZIhvcNAQEFBQADggEBABY2ZzBaW0dMsAAT7tPJzrVWVzQx6KU4 UEBLudIlWPlkAwTnINCWR/8eNjCCmGA4heUdHmazdpPa8RzwOmc0NT1NQqzSyktt vTqb4iHD7+8f9MqJ9/FssCfTtqr/Qst/hGH4Wmdf1EJ/6FqYAAb5iRlPgshFZxU8 uXtA8hWn6fK6eISD9HBdcAFToUvKNZ1BIDPvh9f95Ine8ar6yGd56TUNrHR8eHBs ESxz5ddVR/oWRysNJ+aGAyYqHS8S/ttmC7r4XCAHqXptkHPCGRqkAhsterYhd4I8 /cBzejUobNCjjHFbtkAL/SjxZOLW+pNkZwfeYdM8iPkD54Uua1v2tdw= -----END CERTIFICATE-----"
                            },
                            "bundle_method": {
                                "type": "string",
                                "enum": [
                                    "ubiquitous",
                                    "optimal",
                                    "force"
                                ],
                                "description": "A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.",
                                "example": "ubiquitous",
                                "default": "ubiquitous"
                            }
                        }
                    },
                    "targetSchema": {
                        "allOf": [
                            {
                                "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                                "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                "description": "Schema for an API response from Cloudflare that contains a single result object",
                                "type": "object",
                                "allOf": [
                                    {
                                        "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                        "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                        "description": "Common schema for all Cloudflare v4 API responses",
                                        "type": "object",
                                        "required": [
                                            "success",
                                            "errors",
                                            "messages",
                                            "result"
                                        ],
                                        "oneOf": [
                                            {
                                                "$comment": "This subschema describes successful responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            true
                                                        ],
                                                        "example": true
                                                    },
                                                    "errors": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "messages": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": [
                                                            "object",
                                                            "array",
                                                            "string"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "$comment": "This subschema describes failure responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            false
                                                        ],
                                                        "example": false
                                                    },
                                                    "errors": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "minLength": 1,
                                                        "example": [
                                                            {
                                                                "code": 7003,
                                                                "message": "No route for the URI"
                                                            }
                                                        ]
                                                    },
                                                    "messages": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": "null",
                                                        "enum": [
                                                            null
                                                        ],
                                                        "example": null
                                                    }
                                                }
                                            }
                                        ],
                                        "definitions": {
                                            "messages": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "code",
                                                        "message"
                                                    ],
                                                    "properties": {
                                                        "code": {
                                                            "type": "integer",
                                                            "minimum": 1000
                                                        },
                                                        "message": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "example": []
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "result": {
                                                "type": [
                                                    "object",
                                                    "string",
                                                    "null"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "properties": {
                                    "result": {
                                        "type": "object",
                                        "cfRecurse": ""
                                    }
                                }
                            }
                        ]
                    },
                    "cfOwnership": "ssl",
                    "cfPlanAvailability": {
                        "free": false,
                        "pro": false,
                        "business": false,
                        "enterprise": true
                    },
                    "cfPermissionsRequired": {
                        "enum": [
                            "#ssl:edit"
                        ]
                    }
                },
                {
                    "title": "Get Keyless SSL Configuration",
                    "description": "Get details for one Keyless SSL configuration",
                    "rel": "self",
                    "href": "zones/{#/definitions/zone_identifier}/keyless_certificates/{#/definitions/identifier}",
                    "method": "GET",
                    "targetSchema": {
                        "allOf": [
                            {
                                "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                                "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                "description": "Schema for an API response from Cloudflare that contains a single result object",
                                "type": "object",
                                "allOf": [
                                    {
                                        "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                        "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                        "description": "Common schema for all Cloudflare v4 API responses",
                                        "type": "object",
                                        "required": [
                                            "success",
                                            "errors",
                                            "messages",
                                            "result"
                                        ],
                                        "oneOf": [
                                            {
                                                "$comment": "This subschema describes successful responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            true
                                                        ],
                                                        "example": true
                                                    },
                                                    "errors": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "messages": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": [
                                                            "object",
                                                            "array",
                                                            "string"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "$comment": "This subschema describes failure responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            false
                                                        ],
                                                        "example": false
                                                    },
                                                    "errors": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "minLength": 1,
                                                        "example": [
                                                            {
                                                                "code": 7003,
                                                                "message": "No route for the URI"
                                                            }
                                                        ]
                                                    },
                                                    "messages": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": "null",
                                                        "enum": [
                                                            null
                                                        ],
                                                        "example": null
                                                    }
                                                }
                                            }
                                        ],
                                        "definitions": {
                                            "messages": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "code",
                                                        "message"
                                                    ],
                                                    "properties": {
                                                        "code": {
                                                            "type": "integer",
                                                            "minimum": 1000
                                                        },
                                                        "message": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "example": []
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "result": {
                                                "type": [
                                                    "object",
                                                    "string",
                                                    "null"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "properties": {
                                    "result": {
                                        "type": "object",
                                        "cfRecurse": ""
                                    }
                                }
                            }
                        ]
                    },
                    "cfOwnership": "ssl",
                    "cfPlanAvailability": {
                        "free": false,
                        "pro": false,
                        "business": false,
                        "enterprise": true
                    },
                    "cfPermissionsRequired": {
                        "enum": [
                            "#ssl:read"
                        ]
                    }
                },
                {
                    "title": "Edit Keyless SSL Configuration",
                    "description": "This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port,certificate,enabled",
                    "rel": "self",
                    "href": "zones/{#/definitions/zone_identifier}/keyless_certificates/{#/definitions/identifier}",
                    "method": "PATCH",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "host": {
                                "type": "string",
                                "pattern": "hostname_or_ip",
                                "description": "The keyless SSL name",
                                "maxLength": 253,
                                "example": "example.com"
                            },
                            "name": {
                                "type": "string",
                                "description": "The keyless SSL name",
                                "maxLength": 180,
                                "readOnly": true,
                                "example": "example.com Keyless SSL"
                            },
                            "port": {
                                "type": "number",
                                "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                                "maxLength": 65535,
                                "default": 24008,
                                "example": 24008
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Whether or not the Keyless SSL is on or off",
                                "readOnly": true,
                                "example": false
                            }
                        }
                    },
                    "targetSchema": {
                        "allOf": [
                            {
                                "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                                "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                "description": "Schema for an API response from Cloudflare that contains a single result object",
                                "type": "object",
                                "allOf": [
                                    {
                                        "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                        "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                        "description": "Common schema for all Cloudflare v4 API responses",
                                        "type": "object",
                                        "required": [
                                            "success",
                                            "errors",
                                            "messages",
                                            "result"
                                        ],
                                        "oneOf": [
                                            {
                                                "$comment": "This subschema describes successful responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            true
                                                        ],
                                                        "example": true
                                                    },
                                                    "errors": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "messages": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": [
                                                            "object",
                                                            "array",
                                                            "string"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "$comment": "This subschema describes failure responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            false
                                                        ],
                                                        "example": false
                                                    },
                                                    "errors": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "minLength": 1,
                                                        "example": [
                                                            {
                                                                "code": 7003,
                                                                "message": "No route for the URI"
                                                            }
                                                        ]
                                                    },
                                                    "messages": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": "null",
                                                        "enum": [
                                                            null
                                                        ],
                                                        "example": null
                                                    }
                                                }
                                            }
                                        ],
                                        "definitions": {
                                            "messages": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "code",
                                                        "message"
                                                    ],
                                                    "properties": {
                                                        "code": {
                                                            "type": "integer",
                                                            "minimum": 1000
                                                        },
                                                        "message": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "example": []
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "result": {
                                                "type": [
                                                    "object",
                                                    "string",
                                                    "null"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "properties": {
                                    "result": {
                                        "type": "object",
                                        "cfRecurse": ""
                                    }
                                }
                            }
                        ]
                    },
                    "cfOwnership": "ssl",
                    "cfPlanAvailability": {
                        "free": false,
                        "pro": false,
                        "business": false,
                        "enterprise": true
                    },
                    "cfPermissionsRequired": {
                        "enum": [
                            "#ssl:edit"
                        ]
                    }
                },
                {
                    "title": "Delete Keyless SSL Configuration",
                    "rel": "self",
                    "href": "zones/{#/definitions/zone_identifier}/keyless_certificates/{#/definitions/identifier}",
                    "method": "DELETE",
                    "targetSchema": {
                        "allOf": [
                            {
                                "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                                "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                "description": "Schema for an API response from Cloudflare that contains a single result object",
                                "type": "object",
                                "allOf": [
                                    {
                                        "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                        "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                        "description": "Common schema for all Cloudflare v4 API responses",
                                        "type": "object",
                                        "required": [
                                            "success",
                                            "errors",
                                            "messages",
                                            "result"
                                        ],
                                        "oneOf": [
                                            {
                                                "$comment": "This subschema describes successful responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            true
                                                        ],
                                                        "example": true
                                                    },
                                                    "errors": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "messages": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": [
                                                            "object",
                                                            "array",
                                                            "string"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "$comment": "This subschema describes failure responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            false
                                                        ],
                                                        "example": false
                                                    },
                                                    "errors": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "minLength": 1,
                                                        "example": [
                                                            {
                                                                "code": 7003,
                                                                "message": "No route for the URI"
                                                            }
                                                        ]
                                                    },
                                                    "messages": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": "null",
                                                        "enum": [
                                                            null
                                                        ],
                                                        "example": null
                                                    }
                                                }
                                            }
                                        ],
                                        "definitions": {
                                            "messages": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "code",
                                                        "message"
                                                    ],
                                                    "properties": {
                                                        "code": {
                                                            "type": "integer",
                                                            "minimum": 1000
                                                        },
                                                        "message": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "example": []
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "result": {
                                                "type": [
                                                    "object",
                                                    "string",
                                                    "null"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "properties": {
                                    "result": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "description": "Keyless certificate identifier tag",
                                                "type": "string",
                                                "maxLength": 32,
                                                "readOnly": true,
                                                "example": "4d2844d2ce78891c34d0b6c0535a291e"
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "cfOwnership": "ssl",
                    "cfPlanAvailability": {
                        "free": false,
                        "pro": false,
                        "business": false,
                        "enterprise": true
                    },
                    "cfPermissionsRequired": {
                        "enum": [
                            "#ssl:edit"
                        ]
                    }
                }
            ]
        }
    },
    "links": [
        {
            "title": "List SSL Configurations",
            "description": "List, search, and filter all of your custom SSL certificates. The higher priority will break ties across overlapping 'legacy_custom' certificates, but 'legacy_custom' certificates will always supercede 'sni_custom' certificates.",
            "rel": "collection",
            "href": "zones/{#/definitions/zone_identifier}/custom_certificates",
            "method": "GET",
            "cfOwnership": "ssl",
            "cfPlanAvailability": {
                "free": false,
                "pro": false,
                "business": true,
                "enterprise": true
            },
            "cfPermissionsRequired": {
                "enum": [
                    "#ssl:read"
                ]
            },
            "html_id": "custom-ssl-for-a-zone-list-ssl-configurations",
            "uri": "zones/:zone_identifier/custom_certificates",
            "curl": "curl -X GET \"https://api.cloudflare.com/client/v4/zones/023e105f4ecef8ad9ca31a8372d0c353/custom_certificates?status=active&page=1&per_page=20&match=all\" \\\n     -H \"X-Auth-Email: user@example.com\" \\\n     -H \"X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41\" \\\n     -H \"Content-Type: application/json\"",
            "parameters": {
                "_formatter": {
                    "jsonMediaType": {}
                },
                "all_props": {
                    "status": {
                        "example": "\"active\"",
                        "enum": [
                            "active",
                            "expired",
                            "deleted",
                            "pending",
                            "initializing"
                        ],
                        "readOnly": true,
                        "description": "Status of the zone's custom SSL"
                    },
                    "page": {
                        "type": "number",
                        "example": "1",
                        "minimum": 1,
                        "default": 1,
                        "description": "Page number of paginated results"
                    },
                    "per_page": {
                        "type": "number",
                        "example": "20",
                        "minimum": 5,
                        "maximum": 50,
                        "default": 20,
                        "description": "Number of zones per page"
                    },
                    "match": {
                        "type": "string",
                        "example": "\"all\"",
                        "enum": [
                            "any",
                            "all"
                        ],
                        "default": "all",
                        "description": "Whether to match all search requirements or at least one (any)"
                    }
                },
                "required_props": [],
                "optional_props": [
                    "status",
                    "page",
                    "per_page",
                    "match"
                ],
                "objects": [],
                "example": "{\n  \"status\": \"active\",\n  \"page\": 1,\n  \"per_page\": 20,\n  \"match\": \"all\"\n}"
            },
            "response": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": [\n    {\n      \"id\": \"2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\",\n      \"hosts\": [\n        \"example.com\"\n      ],\n      \"issuer\": \"GlobalSign\",\n      \"signature\": \"SHA256WithRSA\",\n      \"status\": \"active\",\n      \"bundle_method\": \"ubiquitous\",\n      \"geo_restrictions\": {\n        \"label\": \"us\"\n      },\n      \"zone_id\": \"023e105f4ecef8ad9ca31a8372d0c353\",\n      \"uploaded_on\": \"2014-01-01T05:20:00Z\",\n      \"modified_on\": \"2014-01-01T05:20:00Z\",\n      \"expires_on\": \"2016-01-01T05:20:00Z\",\n      \"priority\": 1\n    }\n  ]\n}"
        },
        {
            "title": "Create SSL Configuration",
            "description": "Upload a new SSL certificate for a zone",
            "rel": "collection",
            "href": "zones/{#/definitions/zone_identifier}/custom_certificates",
            "method": "POST",
            "cfOwnership": "ssl",
            "cfPlanAvailability": {
                "free": false,
                "pro": false,
                "business": true,
                "enterprise": true
            },
            "cfPermissionsRequired": {
                "enum": [
                    "#ssl:edit"
                ]
            },
            "html_id": "custom-ssl-for-a-zone-create-ssl-configuration",
            "uri": "zones/:zone_identifier/custom_certificates",
            "curl": "curl -X POST \"https://api.cloudflare.com/client/v4/zones/023e105f4ecef8ad9ca31a8372d0c353/custom_certificates\" \\\n     -H \"X-Auth-Email: user@example.com\" \\\n     -H \"X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41\" \\\n     -H \"Content-Type: application/json\" \\\n     --data '{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIDtTCCAp2gAwIBAgIJAMHAwfXZ5/PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\\nBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX\\naWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF\\nMQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50\\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\\nCgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1\\nCGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB\\nKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5\\n0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI\\ndZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2\\nizNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4\\n9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI\\nGKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV\\nBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF\\nMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2\\n2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP\\nMlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG\\nSvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq\\n2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw\\nYbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=\\n-----END CERTIFICATE-----\\n\",\"private_key\":\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG\\ndtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn\\nabIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid\\ntnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py\\nFxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE\\newooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb\\nHBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/\\naxiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb\\n+ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g\\n+j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv\\nKLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7\\n9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo\\n/WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu\\niacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9\\nN2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe\\nVAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB\\nvULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U\\nlySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR\\n9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7\\nmEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX\\ndFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe\\nPG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS\\nfhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W\\nqu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T\\nlv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi\\n-----END RSA PRIVATE KEY-----\\n\",\"bundle_method\":\"ubiquitous\",\"geo_restrictions\":{\"label\":\"us\"},\"type\":\"sni_custom\"}'",
            "parameters": {
                "_formatter": {
                    "jsonMediaType": {}
                },
                "all_props": {
                    "certificate": {
                        "type": "string",
                        "example": "\"-----BEGIN CERTIFICATE-----\\nMIIDtTCCAp2gAwIBAgIJAMHAwfXZ5/PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\\nBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX\\naWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF\\nMQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50\\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\\nCgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1\\nCGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB\\nKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5\\n0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI\\ndZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2\\nizNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4\\n9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI\\nGKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV\\nBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF\\nMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2\\n2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP\\nMlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG\\nSvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq\\n2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw\\nYbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=\\n-----END CERTIFICATE-----\\n\"",
                        "description": "The zone's SSL certificate or certificate and the intermediate(s)"
                    },
                    "private_key": {
                        "type": "string",
                        "example": "\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG\\ndtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn\\nabIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid\\ntnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py\\nFxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE\\newooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb\\nHBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/\\naxiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb\\n+ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g\\n+j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv\\nKLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7\\n9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo\\n/WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu\\niacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9\\nN2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe\\nVAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB\\nvULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U\\nlySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR\\n9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7\\nmEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX\\ndFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe\\nPG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS\\nfhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W\\nqu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T\\nlv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi\\n-----END RSA PRIVATE KEY-----\\n\"",
                        "description": "The zone's private key"
                    },
                    "bundle_method": {
                        "type": "string",
                        "example": "\"ubiquitous\"",
                        "enum": [
                            "ubiquitous",
                            "optimal",
                            "force"
                        ],
                        "description": "A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.",
                        "default": "ubiquitous"
                    },
                    "geo_restrictions": {
                        "type": "object",
                        "example": "{\n  \"label\": \"us\"\n}",
                        "properties": {
                            "label": {
                                "example": "\"us\"",
                                "enum": [
                                    "us",
                                    "eu",
                                    "highest_security"
                                ]
                            }
                        },
                        "description": "Specify the region where your private key can be held locally for optimal TLS performance. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Options allow distribution to only to U.S. data centers, only to E.U. data centers, or only to highest security data centers. Default distribution is to all Cloudflare datacenters, for optimal performance."
                    },
                    "type": {
                        "type": "string",
                        "example": "\"sni_custom\"",
                        "enum": [
                            "legacy_custom",
                            "sni_custom"
                        ],
                        "description": "The type 'legacy_custom' enables support for legacy clients which do not include SNI in the TLS handshake.",
                        "default": "legacy_custom"
                    }
                },
                "required_props": [
                    "certificate",
                    "private_key"
                ],
                "optional_props": [
                    "bundle_method",
                    "geo_restrictions",
                    "type"
                ],
                "objects": [],
                "example": "{\n  \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDtTCCAp2gAwIBAgIJAMHAwfXZ5/PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\\nBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX\\naWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF\\nMQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50\\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\\nCgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1\\nCGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB\\nKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5\\n0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI\\ndZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2\\nizNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4\\n9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI\\nGKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV\\nBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF\\nMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2\\n2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP\\nMlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG\\nSvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq\\n2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw\\nYbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=\\n-----END CERTIFICATE-----\\n\",\n  \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG\\ndtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn\\nabIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid\\ntnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py\\nFxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE\\newooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb\\nHBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/\\naxiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb\\n+ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g\\n+j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv\\nKLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7\\n9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo\\n/WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu\\niacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9\\nN2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe\\nVAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB\\nvULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U\\nlySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR\\n9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7\\nmEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX\\ndFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe\\nPG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS\\nfhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W\\nqu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T\\nlv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi\\n-----END RSA PRIVATE KEY-----\\n\",\n  \"bundle_method\": \"ubiquitous\",\n  \"geo_restrictions\": {\n    \"label\": \"us\"\n  },\n  \"type\": \"sni_custom\"\n}"
            },
            "response": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": {\n    \"id\": \"2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\",\n    \"hosts\": [\n      \"example.com\"\n    ],\n    \"issuer\": \"GlobalSign\",\n    \"signature\": \"SHA256WithRSA\",\n    \"status\": \"active\",\n    \"bundle_method\": \"ubiquitous\",\n    \"geo_restrictions\": {\n      \"label\": \"us\"\n    },\n    \"zone_id\": \"023e105f4ecef8ad9ca31a8372d0c353\",\n    \"uploaded_on\": \"2014-01-01T05:20:00Z\",\n    \"modified_on\": \"2014-01-01T05:20:00Z\",\n    \"expires_on\": \"2016-01-01T05:20:00Z\",\n    \"priority\": 1\n  }\n}"
        },
        {
            "title": "SSL Configuration Details",
            "rel": "self",
            "href": "zones/{#/definitions/zone_identifier}/custom_certificates/{#/definitions/identifier}",
            "method": "GET",
            "cfOwnership": "ssl",
            "cfPlanAvailability": {
                "free": false,
                "pro": false,
                "business": true,
                "enterprise": true
            },
            "cfPermissionsRequired": {
                "enum": [
                    "#ssl:read"
                ]
            },
            "html_id": "custom-ssl-for-a-zone-ssl-configuration-details",
            "uri": "zones/:zone_identifier/custom_certificates/:identifier",
            "curl": "curl -X GET \"https://api.cloudflare.com/client/v4/zones/023e105f4ecef8ad9ca31a8372d0c353/custom_certificates/2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\" \\\n     -H \"X-Auth-Email: user@example.com\" \\\n     -H \"X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41\" \\\n     -H \"Content-Type: application/json\"",
            "response": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": {\n    \"id\": \"2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\",\n    \"hosts\": [\n      \"example.com\"\n    ],\n    \"issuer\": \"GlobalSign\",\n    \"signature\": \"SHA256WithRSA\",\n    \"status\": \"active\",\n    \"bundle_method\": \"ubiquitous\",\n    \"geo_restrictions\": {\n      \"label\": \"us\"\n    },\n    \"zone_id\": \"023e105f4ecef8ad9ca31a8372d0c353\",\n    \"uploaded_on\": \"2014-01-01T05:20:00Z\",\n    \"modified_on\": \"2014-01-01T05:20:00Z\",\n    \"expires_on\": \"2016-01-01T05:20:00Z\",\n    \"priority\": 1\n  }\n}"
        },
        {
            "title": "Edit SSL Configuration",
            "description": "Upload a new private key and/or PEM/CRT for the SSL certificate. Note: PATCHing a configuration for sni_custom certificates will result in a new resource id being returned, and the previous one being deleted.",
            "rel": "self",
            "href": "zones/{#/definitions/zone_identifier}/custom_certificates/{#/definitions/identifier}",
            "method": "PATCH",
            "cfOwnership": "ssl",
            "cfPlanAvailability": {
                "free": false,
                "pro": false,
                "business": true,
                "enterprise": true
            },
            "cfPermissionsRequired": {
                "enum": [
                    "#ssl:edit"
                ]
            },
            "html_id": "custom-ssl-for-a-zone-edit-ssl-configuration",
            "uri": "zones/:zone_identifier/custom_certificates/:identifier",
            "curl": "curl -X PATCH \"https://api.cloudflare.com/client/v4/zones/023e105f4ecef8ad9ca31a8372d0c353/custom_certificates/2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\" \\\n     -H \"X-Auth-Email: user@example.com\" \\\n     -H \"X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41\" \\\n     -H \"Content-Type: application/json\" \\\n     --data '{\"private_key\":\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG\\ndtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn\\nabIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid\\ntnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py\\nFxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE\\newooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb\\nHBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/\\naxiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb\\n+ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g\\n+j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv\\nKLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7\\n9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo\\n/WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu\\niacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9\\nN2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe\\nVAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB\\nvULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U\\nlySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR\\n9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7\\nmEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX\\ndFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe\\nPG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS\\nfhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W\\nqu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T\\nlv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi\\n-----END RSA PRIVATE KEY-----\\n\",\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIDtTCCAp2gAwIBAgIJAMHAwfXZ5/PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\\nBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX\\naWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF\\nMQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50\\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\\nCgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1\\nCGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB\\nKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5\\n0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI\\ndZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2\\nizNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4\\n9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI\\nGKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV\\nBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF\\nMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2\\n2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP\\nMlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG\\nSvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq\\n2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw\\nYbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=\\n-----END CERTIFICATE-----\\n\",\"bundle_method\":\"ubiquitous\",\"geo_restrictions\":{\"label\":\"us\"}}'",
            "parameters": {
                "_formatter": {
                    "jsonMediaType": {}
                },
                "all_props": {
                    "private_key": {
                        "type": "string",
                        "example": "\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG\\ndtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn\\nabIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid\\ntnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py\\nFxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE\\newooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb\\nHBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/\\naxiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb\\n+ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g\\n+j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv\\nKLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7\\n9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo\\n/WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu\\niacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9\\nN2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe\\nVAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB\\nvULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U\\nlySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR\\n9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7\\nmEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX\\ndFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe\\nPG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS\\nfhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W\\nqu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T\\nlv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi\\n-----END RSA PRIVATE KEY-----\\n\"",
                        "description": "The zone's private key"
                    },
                    "certificate": {
                        "type": "string",
                        "example": "\"-----BEGIN CERTIFICATE-----\\nMIIDtTCCAp2gAwIBAgIJAMHAwfXZ5/PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\\nBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX\\naWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF\\nMQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50\\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\\nCgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1\\nCGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB\\nKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5\\n0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI\\ndZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2\\nizNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4\\n9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI\\nGKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV\\nBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF\\nMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2\\n2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP\\nMlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG\\nSvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq\\n2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw\\nYbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=\\n-----END CERTIFICATE-----\\n\"",
                        "description": "The zone's SSL certificate or certificate and the intermediate(s)"
                    },
                    "bundle_method": {
                        "type": "string",
                        "example": "\"ubiquitous\"",
                        "enum": [
                            "ubiquitous",
                            "optimal",
                            "force"
                        ],
                        "description": "A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.",
                        "default": "ubiquitous"
                    },
                    "geo_restrictions": {
                        "type": "object",
                        "example": "{\n  \"label\": \"us\"\n}",
                        "properties": {
                            "label": {
                                "example": "\"us\"",
                                "enum": [
                                    "us",
                                    "eu",
                                    "highest_security"
                                ]
                            }
                        },
                        "description": "Specify the region where your private key can be held locally for optimal TLS performance. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Options allow distribution to only to U.S. data centers, only to E.U. data centers, or only to highest security data centers. Default distribution is to all Cloudflare datacenters, for optimal performance."
                    }
                },
                "required_props": [],
                "optional_props": [
                    "private_key",
                    "certificate",
                    "bundle_method",
                    "geo_restrictions"
                ],
                "objects": [],
                "example": "{\n  \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG\\ndtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn\\nabIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid\\ntnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py\\nFxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE\\newooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb\\nHBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/\\naxiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb\\n+ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g\\n+j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv\\nKLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7\\n9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo\\n/WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu\\niacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9\\nN2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe\\nVAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB\\nvULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U\\nlySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR\\n9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7\\nmEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX\\ndFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe\\nPG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS\\nfhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W\\nqu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T\\nlv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi\\n-----END RSA PRIVATE KEY-----\\n\",\n  \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDtTCCAp2gAwIBAgIJAMHAwfXZ5/PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\\nBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX\\naWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF\\nMQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50\\nZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\\nCgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1\\nCGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB\\nKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5\\n0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI\\ndZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2\\nizNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4\\n9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI\\nGKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV\\nBAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF\\nMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2\\n2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP\\nMlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG\\nSvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq\\n2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw\\nYbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=\\n-----END CERTIFICATE-----\\n\",\n  \"bundle_method\": \"ubiquitous\",\n  \"geo_restrictions\": {\n    \"label\": \"us\"\n  }\n}"
            },
            "response": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": {\n    \"id\": \"2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\",\n    \"hosts\": [\n      \"example.com\"\n    ],\n    \"issuer\": \"GlobalSign\",\n    \"signature\": \"SHA256WithRSA\",\n    \"status\": \"active\",\n    \"bundle_method\": \"ubiquitous\",\n    \"geo_restrictions\": {\n      \"label\": \"us\"\n    },\n    \"zone_id\": \"023e105f4ecef8ad9ca31a8372d0c353\",\n    \"uploaded_on\": \"2014-01-01T05:20:00Z\",\n    \"modified_on\": \"2014-01-01T05:20:00Z\",\n    \"expires_on\": \"2016-01-01T05:20:00Z\",\n    \"priority\": 1\n  }\n}"
        },
        {
            "title": "Delete SSL Configuration",
            "description": "Remove a SSL certificate from a zone.",
            "rel": "self",
            "href": "zones/{#/definitions/zone_identifier}/custom_certificates/{#/definitions/identifier}",
            "method": "DELETE",
            "cfOwnership": "ssl",
            "cfPlanAvailability": {
                "free": false,
                "pro": false,
                "business": true,
                "enterprise": true
            },
            "cfPermissionsRequired": {
                "enum": [
                    "#ssl:edit"
                ]
            },
            "html_id": "custom-ssl-for-a-zone-delete-ssl-configuration",
            "uri": "zones/:zone_identifier/custom_certificates/:identifier",
            "curl": "curl -X DELETE \"https://api.cloudflare.com/client/v4/zones/023e105f4ecef8ad9ca31a8372d0c353/custom_certificates/2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\" \\\n     -H \"X-Auth-Email: user@example.com\" \\\n     -H \"X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41\" \\\n     -H \"Content-Type: application/json\"",
            "response": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": {\n    \"id\": \"2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\"\n  }\n}"
        },
        {
            "title": "Re-prioritize SSL Certificates",
            "description": "If a zone has multiple SSL certificates, you can set the order in which they should be used during a request. The higher priority will break ties across overlapping 'legacy_custom' certificates.",
            "rel": "tag:cloudflare.com,2017:priority",
            "href": "zones/{#/definitions/zone_identifier}/custom_certificates/prioritize",
            "method": "PUT",
            "cfOwnership": "ssl",
            "cfPlanAvailability": {
                "free": false,
                "pro": false,
                "business": true,
                "enterprise": true
            },
            "cfPermissionsRequired": {
                "enum": [
                    "#ssl:edit"
                ]
            },
            "html_id": "custom-ssl-for-a-zone-re-prioritize-ssl-certificates",
            "uri": "zones/:zone_identifier/custom_certificates/prioritize",
            "curl": "curl -X PUT \"https://api.cloudflare.com/client/v4/zones/023e105f4ecef8ad9ca31a8372d0c353/custom_certificates/prioritize\" \\\n     -H \"X-Auth-Email: user@example.com\" \\\n     -H \"X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41\" \\\n     -H \"Content-Type: application/json\" \\\n     --data '{\"certificates\":[{\"id\":\"5a7805061c76ada191ed06f989cc3dac\",\"priority\":2},{\"id\":\"9a7806061c88ada191ed06f989cc3dac\",\"priority\":1}]}'",
            "parameters": {
                "_formatter": {
                    "jsonMediaType": {}
                },
                "all_props": {
                    "certificates": {
                        "type": "array",
                        "example": "[\n  {\n    \"id\": \"5a7805061c76ada191ed06f989cc3dac\",\n    \"priority\": 2\n  },\n  {\n    \"id\": \"9a7806061c88ada191ed06f989cc3dac\",\n    \"priority\": 1\n  }\n]",
                        "description": "Array of ordered certificates.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Custom certificate identifier tag",
                                    "type": "string",
                                    "maxLength": 36,
                                    "readOnly": true,
                                    "example": "2458ce5a-0c35-4c7f-82c7-8e9487d3ff60"
                                },
                                "priority": {
                                    "type": "number",
                                    "description": "The order/priority in which the certificate will be used in a request. The higher priority will break ties across overlapping 'legacy_custom' certificates, but 'legacy_custom' certificates will always supercede 'sni_custom' certificates.",
                                    "default": 20,
                                    "example": 1
                                }
                            }
                        }
                    }
                },
                "required_props": [
                    "certificates"
                ],
                "optional_props": [],
                "objects": [],
                "example": "{\n  \"certificates\": [\n    {\n      \"id\": \"5a7805061c76ada191ed06f989cc3dac\",\n      \"priority\": 2\n    },\n    {\n      \"id\": \"9a7806061c88ada191ed06f989cc3dac\",\n      \"priority\": 1\n    }\n  ]\n}"
            },
            "response": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": [\n    {\n      \"id\": \"2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\",\n      \"hosts\": [\n        \"example.com\"\n      ],\n      \"issuer\": \"GlobalSign\",\n      \"signature\": \"SHA256WithRSA\",\n      \"status\": \"active\",\n      \"bundle_method\": \"ubiquitous\",\n      \"geo_restrictions\": {\n        \"label\": \"us\"\n      },\n      \"zone_id\": \"023e105f4ecef8ad9ca31a8372d0c353\",\n      \"uploaded_on\": \"2014-01-01T05:20:00Z\",\n      \"modified_on\": \"2014-01-01T05:20:00Z\",\n      \"expires_on\": \"2016-01-01T05:20:00Z\",\n      \"priority\": 1\n    }\n  ]\n}"
        }
    ],
    "html_id": "custom-ssl-for-a-zone",
    "object_definition": {
        "_formatter": {
            "jsonMediaType": {}
        },
        "all_props": {
            "id": {
                "type": "string",
                "example": "\"2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\"",
                "description": "Custom certificate identifier tag",
                "maxLength": 36,
                "readOnly": true
            },
            "hosts": {
                "type": "array",
                "example": "[\n  \"example.com\"\n]",
                "items": {
                    "type": "string",
                    "description": "The valid hosts for the certificates",
                    "maxLength": 253,
                    "readOnly": true,
                    "example": "example.com"
                }
            },
            "issuer": {
                "type": "string",
                "example": "\"GlobalSign\"",
                "readOnly": true,
                "description": "The certificate authority that issued the certificate"
            },
            "signature": {
                "type": "string",
                "example": "\"SHA256WithRSA\"",
                "readOnly": true,
                "description": "The type of hash used for the certificate"
            },
            "status": {
                "example": "\"active\"",
                "enum": [
                    "active",
                    "expired",
                    "deleted",
                    "pending",
                    "initializing"
                ],
                "readOnly": true,
                "description": "Status of the zone's custom SSL"
            },
            "bundle_method": {
                "type": "string",
                "example": "\"ubiquitous\"",
                "enum": [
                    "ubiquitous",
                    "optimal",
                    "force"
                ],
                "description": "A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.",
                "default": "ubiquitous"
            },
            "geo_restrictions": {
                "type": "object",
                "example": "{\n  \"label\": \"us\"\n}",
                "properties": {
                    "label": {
                        "example": "\"us\"",
                        "enum": [
                            "us",
                            "eu",
                            "highest_security"
                        ]
                    }
                },
                "description": "Specify the region where your private key can be held locally for optimal TLS performance. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Options allow distribution to only to U.S. data centers, only to E.U. data centers, or only to highest security data centers. Default distribution is to all Cloudflare datacenters, for optimal performance."
            },
            "zone_id": {
                "type": "string",
                "example": "\"023e105f4ecef8ad9ca31a8372d0c353\"",
                "description": "Zone identifier tag",
                "maxLength": 32,
                "readOnly": true
            },
            "uploaded_on": {
                "type": "string",
                "example": "\"2014-01-01T05:20:00Z\"",
                "format": "date-time",
                "readOnly": true,
                "description": "When the certificate was uploaded to Cloudflare"
            },
            "modified_on": {
                "type": "string",
                "example": "\"2014-01-01T05:20:00Z\"",
                "format": "date-time",
                "readOnly": true,
                "description": "When the certificate was last modified"
            },
            "expires_on": {
                "type": "string",
                "example": "\"2016-01-01T05:20:00Z\"",
                "format": "date-time",
                "readOnly": true,
                "description": "When the certificate from the authority expires"
            },
            "priority": {
                "type": "number",
                "example": "1",
                "description": "The order/priority in which the certificate will be used in a request. The higher priority will break ties across overlapping 'legacy_custom' certificates, but 'legacy_custom' certificates will always supercede 'sni_custom' certificates.",
                "default": 20
            },
            "keyless_server": {
                "type": "object",
                "example": "{\n  \"id\": \"4d2844d2ce78891c34d0b6c0535a291e\",\n  \"name\": \"example.com Keyless SSL\",\n  \"host\": \"example.com\",\n  \"port\": 24008,\n  \"status\": \"active\",\n  \"enabled\": false,\n  \"permissions\": [\n    \"#ssl:read\",\n    \"#ssl:edit\"\n  ],\n  \"created_on\": \"2014-01-01T05:20:00Z\",\n  \"modified_on\": \"2014-01-01T05:20:00Z\"\n}",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "\"4d2844d2ce78891c34d0b6c0535a291e\"",
                        "description": "Keyless certificate identifier tag",
                        "maxLength": 32,
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "example": "\"example.com Keyless SSL\"",
                        "description": "The keyless SSL name",
                        "maxLength": 180,
                        "readOnly": true
                    },
                    "host": {
                        "type": "string",
                        "example": "\"example.com\"",
                        "pattern": "hostname_or_ip",
                        "description": "The keyless SSL name",
                        "maxLength": 253
                    },
                    "port": {
                        "type": "number",
                        "example": "24008",
                        "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                        "maxLength": 65535,
                        "default": 24008
                    },
                    "status": {
                        "type": "string",
                        "example": "\"active\"",
                        "enum": [
                            "active",
                            "deleted"
                        ],
                        "description": "Status of the Keyless SSL",
                        "readOnly": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "example": "false",
                        "description": "Whether or not the Keyless SSL is on or off",
                        "readOnly": true
                    },
                    "permissions": {
                        "type": "array",
                        "example": "[\n  \"#ssl:read\",\n  \"#ssl:edit\"\n]",
                        "description": "Available permissions for the Keyless SSL for the current user requesting the item",
                        "readOnly": true
                    },
                    "created_on": {
                        "type": "string",
                        "example": "\"2014-01-01T05:20:00Z\"",
                        "readOnly": true,
                        "format": "date-time",
                        "description": "When the Keyless SSL was created"
                    },
                    "modified_on": {
                        "type": "string",
                        "example": "\"2014-01-01T05:20:00Z\"",
                        "readOnly": true,
                        "format": "date-time",
                        "description": "When the Keyless SSL was last modified"
                    }
                },
                "id": "https://api.cloudflare.com/schemas/v4/client/zone/keyless-certificate.json",
                "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                "title": "Keyless SSL for a Zone",
                "description": "A Keyless certificate is an SSL certificate where the SSL private key is not stored on Cloudflare",
                "allOf": [
                    {
                        "type": "object",
                        "required": [
                            "id",
                            "name",
                            "host",
                            "port",
                            "status",
                            "enabled",
                            "permissions",
                            "created_on",
                            "modified_on"
                        ],
                        "properties": {
                            "id": {
                                "description": "Keyless certificate identifier tag",
                                "type": "string",
                                "maxLength": 32,
                                "readOnly": true,
                                "example": "4d2844d2ce78891c34d0b6c0535a291e"
                            },
                            "name": {
                                "type": "string",
                                "description": "The keyless SSL name",
                                "maxLength": 180,
                                "readOnly": true,
                                "example": "example.com Keyless SSL"
                            },
                            "host": {
                                "type": "string",
                                "pattern": "hostname_or_ip",
                                "description": "The keyless SSL name",
                                "maxLength": 253,
                                "example": "example.com"
                            },
                            "port": {
                                "type": "number",
                                "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                                "maxLength": 65535,
                                "default": 24008,
                                "example": 24008
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "active",
                                    "deleted"
                                ],
                                "description": "Status of the Keyless SSL",
                                "readOnly": true,
                                "example": "active"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Whether or not the Keyless SSL is on or off",
                                "readOnly": true,
                                "example": false
                            },
                            "permissions": {
                                "description": "Available permissions for the Keyless SSL for the current user requesting the item",
                                "readOnly": true,
                                "type": "array",
                                "example": [
                                    "#ssl:read",
                                    "#ssl:edit"
                                ]
                            },
                            "created_on": {
                                "readOnly": true,
                                "type": "string",
                                "format": "date-time",
                                "example": "2014-01-01T05:20:00Z",
                                "description": "When the Keyless SSL was created"
                            },
                            "modified_on": {
                                "readOnly": true,
                                "type": "string",
                                "format": "date-time",
                                "example": "2014-01-01T05:20:00Z",
                                "description": "When the Keyless SSL was last modified"
                            }
                        }
                    }
                ],
                "definitions": {
                    "identifier": {
                        "description": "Keyless certificate identifier tag",
                        "type": "string",
                        "maxLength": 32,
                        "readOnly": true,
                        "example": "4d2844d2ce78891c34d0b6c0535a291e"
                    },
                    "name": {
                        "type": "string",
                        "description": "The keyless SSL name",
                        "maxLength": 180,
                        "readOnly": true,
                        "example": "example.com Keyless SSL"
                    },
                    "host": {
                        "type": "string",
                        "pattern": "hostname_or_ip",
                        "description": "The keyless SSL name",
                        "maxLength": 253,
                        "example": "example.com"
                    },
                    "port": {
                        "type": "number",
                        "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                        "maxLength": 65535,
                        "default": 24008,
                        "example": 24008
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "deleted"
                        ],
                        "description": "Status of the Keyless SSL",
                        "readOnly": true,
                        "example": "active"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not the Keyless SSL is on or off",
                        "readOnly": true,
                        "example": false
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The zone's SSL certificate or SSL certificate and intermediate(s)",
                        "example": "-----BEGIN CERTIFICATE----- MIIDtTCCAp2gAwIBAgIJAM15n7fdxhRtMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV BAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX aWRnaXRzIFB0eSBMdGQwHhcNMTQwMzExMTkyMTU5WhcNMTQwNDEwMTkyMTU5WjBF MQswCQYDVQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50 ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB CgKCAQEAvq3sKsHpeduJHimOK+fvQdKsI8z8A05MZyyLp2/R/GE8FjNv+hkVY1WQ LIyTNNQH7CJecE1nbTfo8Y56S7x/rhxC6/DJ8MIulapFPnorq46KU6yRxiM0MQ3N nTJHlHA2ozZta6YBBfVfhHWl1F0IfNbXCLKvGwWWMbCx43OfW6KTkbRnE6gFWKuO fSO5h2u5TaWVuSIzBvYs7Vza6m+gtYAvKAJV2nSZ+eSEFPDo29corOy8+huEOUL8 5FAw4BFPsr1TlrlGPFitduQUHGrSL7skk1ESGza0to3bOtrodKei2s9bk5MXm7lZ qI+WZJX4Zu9+mzZhc9pCVi8r/qlXuQIDAQABo4GnMIGkMB0GA1UdDgQWBBRvavf+ sWM4IwKiH9X9w1vl6nUVRDB1BgNVHSMEbjBsgBRvavf+sWM4IwKiH9X9w1vl6nUV RKFJpEcwRTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV BAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAM15n7fdxhRtMAwGA1UdEwQF MAMBAf8wDQYJKoZIhvcNAQEFBQADggEBABY2ZzBaW0dMsAAT7tPJzrVWVzQx6KU4 UEBLudIlWPlkAwTnINCWR/8eNjCCmGA4heUdHmazdpPa8RzwOmc0NT1NQqzSyktt vTqb4iHD7+8f9MqJ9/FssCfTtqr/Qst/hGH4Wmdf1EJ/6FqYAAb5iRlPgshFZxU8 uXtA8hWn6fK6eISD9HBdcAFToUvKNZ1BIDPvh9f95Ine8ar6yGd56TUNrHR8eHBs ESxz5ddVR/oWRysNJ+aGAyYqHS8S/ttmC7r4XCAHqXptkHPCGRqkAhsterYhd4I8 /cBzejUobNCjjHFbtkAL/SjxZOLW+pNkZwfeYdM8iPkD54Uua1v2tdw= -----END CERTIFICATE-----"
                    },
                    "bundle_method": {
                        "type": "string",
                        "enum": [
                            "ubiquitous",
                            "optimal",
                            "force"
                        ],
                        "description": "A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.",
                        "example": "ubiquitous",
                        "default": "ubiquitous"
                    },
                    "base": {
                        "type": "object",
                        "required": [
                            "id",
                            "name",
                            "host",
                            "port",
                            "status",
                            "enabled",
                            "permissions",
                            "created_on",
                            "modified_on"
                        ],
                        "properties": {
                            "id": {
                                "description": "Keyless certificate identifier tag",
                                "type": "string",
                                "maxLength": 32,
                                "readOnly": true,
                                "example": "4d2844d2ce78891c34d0b6c0535a291e"
                            },
                            "name": {
                                "type": "string",
                                "description": "The keyless SSL name",
                                "maxLength": 180,
                                "readOnly": true,
                                "example": "example.com Keyless SSL"
                            },
                            "host": {
                                "type": "string",
                                "pattern": "hostname_or_ip",
                                "description": "The keyless SSL name",
                                "maxLength": 253,
                                "example": "example.com"
                            },
                            "port": {
                                "type": "number",
                                "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                                "maxLength": 65535,
                                "default": 24008,
                                "example": 24008
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "active",
                                    "deleted"
                                ],
                                "description": "Status of the Keyless SSL",
                                "readOnly": true,
                                "example": "active"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Whether or not the Keyless SSL is on or off",
                                "readOnly": true,
                                "example": false
                            },
                            "permissions": {
                                "description": "Available permissions for the Keyless SSL for the current user requesting the item",
                                "readOnly": true,
                                "type": "array",
                                "example": [
                                    "#ssl:read",
                                    "#ssl:edit"
                                ]
                            },
                            "created_on": {
                                "readOnly": true,
                                "type": "string",
                                "format": "date-time",
                                "example": "2014-01-01T05:20:00Z",
                                "description": "When the Keyless SSL was created"
                            },
                            "modified_on": {
                                "readOnly": true,
                                "type": "string",
                                "format": "date-time",
                                "example": "2014-01-01T05:20:00Z",
                                "description": "When the Keyless SSL was last modified"
                            }
                        }
                    },
                    "keyless_response_single": {
                        "allOf": [
                            {
                                "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                                "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                "description": "Schema for an API response from Cloudflare that contains a single result object",
                                "type": "object",
                                "allOf": [
                                    {
                                        "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                        "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                        "description": "Common schema for all Cloudflare v4 API responses",
                                        "type": "object",
                                        "required": [
                                            "success",
                                            "errors",
                                            "messages",
                                            "result"
                                        ],
                                        "oneOf": [
                                            {
                                                "$comment": "This subschema describes successful responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            true
                                                        ],
                                                        "example": true
                                                    },
                                                    "errors": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "messages": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": [
                                                            "object",
                                                            "array",
                                                            "string"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "$comment": "This subschema describes failure responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            false
                                                        ],
                                                        "example": false
                                                    },
                                                    "errors": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "minLength": 1,
                                                        "example": [
                                                            {
                                                                "code": 7003,
                                                                "message": "No route for the URI"
                                                            }
                                                        ]
                                                    },
                                                    "messages": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": "null",
                                                        "enum": [
                                                            null
                                                        ],
                                                        "example": null
                                                    }
                                                }
                                            }
                                        ],
                                        "definitions": {
                                            "messages": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "code",
                                                        "message"
                                                    ],
                                                    "properties": {
                                                        "code": {
                                                            "type": "integer",
                                                            "minimum": 1000
                                                        },
                                                        "message": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "example": []
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "result": {
                                                "type": [
                                                    "object",
                                                    "string",
                                                    "null"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "properties": {
                                    "result": {
                                        "type": "object",
                                        "cfRecurse": ""
                                    }
                                }
                            }
                        ]
                    },
                    "keyless_response_single_id": {
                        "allOf": [
                            {
                                "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                                "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                "description": "Schema for an API response from Cloudflare that contains a single result object",
                                "type": "object",
                                "allOf": [
                                    {
                                        "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                        "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                        "description": "Common schema for all Cloudflare v4 API responses",
                                        "type": "object",
                                        "required": [
                                            "success",
                                            "errors",
                                            "messages",
                                            "result"
                                        ],
                                        "oneOf": [
                                            {
                                                "$comment": "This subschema describes successful responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            true
                                                        ],
                                                        "example": true
                                                    },
                                                    "errors": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "messages": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": [
                                                            "object",
                                                            "array",
                                                            "string"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "$comment": "This subschema describes failure responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            false
                                                        ],
                                                        "example": false
                                                    },
                                                    "errors": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "minLength": 1,
                                                        "example": [
                                                            {
                                                                "code": 7003,
                                                                "message": "No route for the URI"
                                                            }
                                                        ]
                                                    },
                                                    "messages": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": "null",
                                                        "enum": [
                                                            null
                                                        ],
                                                        "example": null
                                                    }
                                                }
                                            }
                                        ],
                                        "definitions": {
                                            "messages": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "code",
                                                        "message"
                                                    ],
                                                    "properties": {
                                                        "code": {
                                                            "type": "integer",
                                                            "minimum": 1000
                                                        },
                                                        "message": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "example": []
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "result": {
                                                "type": [
                                                    "object",
                                                    "string",
                                                    "null"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "properties": {
                                    "result": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "description": "Keyless certificate identifier tag",
                                                "type": "string",
                                                "maxLength": 32,
                                                "readOnly": true,
                                                "example": "4d2844d2ce78891c34d0b6c0535a291e"
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "keyless_response_collection": {
                        "allOf": [
                            {
                                "id": "https://api.cloudflare.com/schemas/v4/common/api-response-collection.json",
                                "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                "description": "Schema for an API response from Cloudflare that contains multiple result objects",
                                "type": "object",
                                "anyOf": [
                                    {
                                        "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                        "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                        "description": "Common schema for all Cloudflare v4 API responses",
                                        "type": "object",
                                        "required": [
                                            "success",
                                            "errors",
                                            "messages",
                                            "result"
                                        ],
                                        "oneOf": [
                                            {
                                                "$comment": "This subschema describes successful responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            true
                                                        ],
                                                        "example": true
                                                    },
                                                    "errors": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "messages": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "required": [
                                                                "code",
                                                                "message"
                                                            ],
                                                            "properties": {
                                                                "code": {
                                                                    "type": "integer",
                                                                    "minimum": 1000
                                                                },
                                                                "message": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "uniqueItems": true
                                                        },
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": [
                                                            "object",
                                                            "array",
                                                            "string"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "$comment": "This subschema describes failure responses",
                                                "properties": {
                                                    "success": {
                                                        "description": "Whether the API call was successful or not",
                                                        "type": "boolean",
                                                        "enum": [
                                                            false
                                                        ],
                                                        "example": false
                                                    },
                                                    "errors": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "minLength": 1,
                                                        "example": [
                                                            {
                                                                "code": 7003,
                                                                "message": "No route for the URI"
                                                            }
                                                        ]
                                                    },
                                                    "messages": {
                                                        "allOf": [
                                                            {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "required": [
                                                                        "code",
                                                                        "message"
                                                                    ],
                                                                    "properties": {
                                                                        "code": {
                                                                            "type": "integer",
                                                                            "minimum": 1000
                                                                        },
                                                                        "message": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "uniqueItems": true
                                                                },
                                                                "example": []
                                                            }
                                                        ],
                                                        "example": []
                                                    },
                                                    "result": {
                                                        "type": "null",
                                                        "enum": [
                                                            null
                                                        ],
                                                        "example": null
                                                    }
                                                }
                                            }
                                        ],
                                        "definitions": {
                                            "messages": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "required": [
                                                        "code",
                                                        "message"
                                                    ],
                                                    "properties": {
                                                        "code": {
                                                            "type": "integer",
                                                            "minimum": 1000
                                                        },
                                                        "message": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "example": []
                                            }
                                        }
                                    },
                                    {
                                        "properties": {
                                            "result": {
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "result_info": {
                                                "type": "object",
                                                "properties": {
                                                    "page": {
                                                        "description": "Current page within paginated list of results",
                                                        "type": "number",
                                                        "example": 1
                                                    },
                                                    "per_page": {
                                                        "description": "Number of results per page of results",
                                                        "type": "number",
                                                        "example": 20
                                                    },
                                                    "count": {
                                                        "description": "Total results returned based on your search parameters",
                                                        "type": "number",
                                                        "example": 1
                                                    },
                                                    "total_count": {
                                                        "description": "Total results available without any search parameters",
                                                        "type": "number",
                                                        "example": 2000
                                                    }
                                                }
                                            }
                                        }
                                    }
                                ],
                                "definitions": {
                                    "params": {
                                        "type": "object",
                                        "properties": {
                                            "page": {
                                                "description": "Requested page within paginated list of results",
                                                "type": "number",
                                                "example": 1
                                            },
                                            "per_page": {
                                                "description": "Maximum number of results requested",
                                                "type": "number",
                                                "example": 20
                                            }
                                        }
                                    },
                                    "result_info": {
                                        "type": "object",
                                        "properties": {
                                            "page": {
                                                "description": "Current page within paginated list of results",
                                                "type": "number",
                                                "example": 1
                                            },
                                            "per_page": {
                                                "description": "Number of results per page of results",
                                                "type": "number",
                                                "example": 20
                                            },
                                            "count": {
                                                "description": "Total results returned based on your search parameters",
                                                "type": "number",
                                                "example": 1
                                            },
                                            "total_count": {
                                                "description": "Total results available without any search parameters",
                                                "type": "number",
                                                "example": 2000
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "properties": {
                                    "result": {
                                        "type": "array",
                                        "items": {
                                            "cfRecurse": ""
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "zone_identifier": {
                        "description": "Zone identifier tag",
                        "type": "string",
                        "maxLength": 32,
                        "readOnly": true,
                        "example": "023e105f4ecef8ad9ca31a8372d0c353"
                    }
                },
                "links": [
                    {
                        "title": "List Keyless SSL Configurations",
                        "description": "List all Keyless SSL configurations for a given zone",
                        "rel": "collection",
                        "href": "zones/{#/definitions/zone_identifier}/keyless_certificates",
                        "method": "GET",
                        "targetSchema": {
                            "allOf": [
                                {
                                    "id": "https://api.cloudflare.com/schemas/v4/common/api-response-collection.json",
                                    "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                    "description": "Schema for an API response from Cloudflare that contains multiple result objects",
                                    "type": "object",
                                    "anyOf": [
                                        {
                                            "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                            "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                            "description": "Common schema for all Cloudflare v4 API responses",
                                            "type": "object",
                                            "required": [
                                                "success",
                                                "errors",
                                                "messages",
                                                "result"
                                            ],
                                            "oneOf": [
                                                {
                                                    "$comment": "This subschema describes successful responses",
                                                    "properties": {
                                                        "success": {
                                                            "description": "Whether the API call was successful or not",
                                                            "type": "boolean",
                                                            "enum": [
                                                                true
                                                            ],
                                                            "example": true
                                                        },
                                                        "errors": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        },
                                                        "messages": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        },
                                                        "result": {
                                                            "type": [
                                                                "object",
                                                                "array",
                                                                "string"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "$comment": "This subschema describes failure responses",
                                                    "properties": {
                                                        "success": {
                                                            "description": "Whether the API call was successful or not",
                                                            "type": "boolean",
                                                            "enum": [
                                                                false
                                                            ],
                                                            "example": false
                                                        },
                                                        "errors": {
                                                            "allOf": [
                                                                {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                            "code",
                                                                            "message"
                                                                        ],
                                                                        "properties": {
                                                                            "code": {
                                                                                "type": "integer",
                                                                                "minimum": 1000
                                                                            },
                                                                            "message": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "uniqueItems": true
                                                                    },
                                                                    "example": []
                                                                }
                                                            ],
                                                            "minLength": 1,
                                                            "example": [
                                                                {
                                                                    "code": 7003,
                                                                    "message": "No route for the URI"
                                                                }
                                                            ]
                                                        },
                                                        "messages": {
                                                            "allOf": [
                                                                {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                            "code",
                                                                            "message"
                                                                        ],
                                                                        "properties": {
                                                                            "code": {
                                                                                "type": "integer",
                                                                                "minimum": 1000
                                                                            },
                                                                            "message": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "uniqueItems": true
                                                                    },
                                                                    "example": []
                                                                }
                                                            ],
                                                            "example": []
                                                        },
                                                        "result": {
                                                            "type": "null",
                                                            "enum": [
                                                                null
                                                            ],
                                                            "example": null
                                                        }
                                                    }
                                                }
                                            ],
                                            "definitions": {
                                                "messages": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                }
                                            }
                                        },
                                        {
                                            "properties": {
                                                "result": {
                                                    "type": [
                                                        "array",
                                                        "null"
                                                    ]
                                                },
                                                "result_info": {
                                                    "type": "object",
                                                    "properties": {
                                                        "page": {
                                                            "description": "Current page within paginated list of results",
                                                            "type": "number",
                                                            "example": 1
                                                        },
                                                        "per_page": {
                                                            "description": "Number of results per page of results",
                                                            "type": "number",
                                                            "example": 20
                                                        },
                                                        "count": {
                                                            "description": "Total results returned based on your search parameters",
                                                            "type": "number",
                                                            "example": 1
                                                        },
                                                        "total_count": {
                                                            "description": "Total results available without any search parameters",
                                                            "type": "number",
                                                            "example": 2000
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "definitions": {
                                        "params": {
                                            "type": "object",
                                            "properties": {
                                                "page": {
                                                    "description": "Requested page within paginated list of results",
                                                    "type": "number",
                                                    "example": 1
                                                },
                                                "per_page": {
                                                    "description": "Maximum number of results requested",
                                                    "type": "number",
                                                    "example": 20
                                                }
                                            }
                                        },
                                        "result_info": {
                                            "type": "object",
                                            "properties": {
                                                "page": {
                                                    "description": "Current page within paginated list of results",
                                                    "type": "number",
                                                    "example": 1
                                                },
                                                "per_page": {
                                                    "description": "Number of results per page of results",
                                                    "type": "number",
                                                    "example": 20
                                                },
                                                "count": {
                                                    "description": "Total results returned based on your search parameters",
                                                    "type": "number",
                                                    "example": 1
                                                },
                                                "total_count": {
                                                    "description": "Total results available without any search parameters",
                                                    "type": "number",
                                                    "example": 2000
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    "properties": {
                                        "result": {
                                            "type": "array",
                                            "items": {
                                                "cfRecurse": ""
                                            }
                                        }
                                    }
                                }
                            ]
                        },
                        "cfOwnership": "ssl",
                        "cfPlanAvailability": {
                            "free": false,
                            "pro": false,
                            "business": false,
                            "enterprise": true
                        },
                        "cfPermissionsRequired": {
                            "enum": [
                                "#ssl:read"
                            ]
                        }
                    },
                    {
                        "title": "Create Keyless SSL Configuration",
                        "rel": "collection",
                        "href": "zones/{#/definitions/zone_identifier}/keyless_certificates",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "required": [
                                "host",
                                "port",
                                "certificate"
                            ],
                            "properties": {
                                "host": {
                                    "type": "string",
                                    "pattern": "hostname_or_ip",
                                    "description": "The keyless SSL name",
                                    "maxLength": 253,
                                    "example": "example.com"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                                    "maxLength": 65535,
                                    "default": 24008,
                                    "example": 24008
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The keyless SSL name",
                                    "maxLength": 180,
                                    "readOnly": true,
                                    "example": "example.com Keyless SSL"
                                },
                                "certificate": {
                                    "type": "string",
                                    "description": "The zone's SSL certificate or SSL certificate and intermediate(s)",
                                    "example": "-----BEGIN CERTIFICATE----- MIIDtTCCAp2gAwIBAgIJAM15n7fdxhRtMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV BAYTAlVTMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX aWRnaXRzIFB0eSBMdGQwHhcNMTQwMzExMTkyMTU5WhcNMTQwNDEwMTkyMTU5WjBF MQswCQYDVQQGEwJVUzETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50 ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB CgKCAQEAvq3sKsHpeduJHimOK+fvQdKsI8z8A05MZyyLp2/R/GE8FjNv+hkVY1WQ LIyTNNQH7CJecE1nbTfo8Y56S7x/rhxC6/DJ8MIulapFPnorq46KU6yRxiM0MQ3N nTJHlHA2ozZta6YBBfVfhHWl1F0IfNbXCLKvGwWWMbCx43OfW6KTkbRnE6gFWKuO fSO5h2u5TaWVuSIzBvYs7Vza6m+gtYAvKAJV2nSZ+eSEFPDo29corOy8+huEOUL8 5FAw4BFPsr1TlrlGPFitduQUHGrSL7skk1ESGza0to3bOtrodKei2s9bk5MXm7lZ qI+WZJX4Zu9+mzZhc9pCVi8r/qlXuQIDAQABo4GnMIGkMB0GA1UdDgQWBBRvavf+ sWM4IwKiH9X9w1vl6nUVRDB1BgNVHSMEbjBsgBRvavf+sWM4IwKiH9X9w1vl6nUV RKFJpEcwRTELMAkGA1UEBhMCVVMxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV BAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAM15n7fdxhRtMAwGA1UdEwQF MAMBAf8wDQYJKoZIhvcNAQEFBQADggEBABY2ZzBaW0dMsAAT7tPJzrVWVzQx6KU4 UEBLudIlWPlkAwTnINCWR/8eNjCCmGA4heUdHmazdpPa8RzwOmc0NT1NQqzSyktt vTqb4iHD7+8f9MqJ9/FssCfTtqr/Qst/hGH4Wmdf1EJ/6FqYAAb5iRlPgshFZxU8 uXtA8hWn6fK6eISD9HBdcAFToUvKNZ1BIDPvh9f95Ine8ar6yGd56TUNrHR8eHBs ESxz5ddVR/oWRysNJ+aGAyYqHS8S/ttmC7r4XCAHqXptkHPCGRqkAhsterYhd4I8 /cBzejUobNCjjHFbtkAL/SjxZOLW+pNkZwfeYdM8iPkD54Uua1v2tdw= -----END CERTIFICATE-----"
                                },
                                "bundle_method": {
                                    "type": "string",
                                    "enum": [
                                        "ubiquitous",
                                        "optimal",
                                        "force"
                                    ],
                                    "description": "A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.",
                                    "example": "ubiquitous",
                                    "default": "ubiquitous"
                                }
                            }
                        },
                        "targetSchema": {
                            "allOf": [
                                {
                                    "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                                    "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                    "description": "Schema for an API response from Cloudflare that contains a single result object",
                                    "type": "object",
                                    "allOf": [
                                        {
                                            "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                            "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                            "description": "Common schema for all Cloudflare v4 API responses",
                                            "type": "object",
                                            "required": [
                                                "success",
                                                "errors",
                                                "messages",
                                                "result"
                                            ],
                                            "oneOf": [
                                                {
                                                    "$comment": "This subschema describes successful responses",
                                                    "properties": {
                                                        "success": {
                                                            "description": "Whether the API call was successful or not",
                                                            "type": "boolean",
                                                            "enum": [
                                                                true
                                                            ],
                                                            "example": true
                                                        },
                                                        "errors": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        },
                                                        "messages": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        },
                                                        "result": {
                                                            "type": [
                                                                "object",
                                                                "array",
                                                                "string"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "$comment": "This subschema describes failure responses",
                                                    "properties": {
                                                        "success": {
                                                            "description": "Whether the API call was successful or not",
                                                            "type": "boolean",
                                                            "enum": [
                                                                false
                                                            ],
                                                            "example": false
                                                        },
                                                        "errors": {
                                                            "allOf": [
                                                                {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                            "code",
                                                                            "message"
                                                                        ],
                                                                        "properties": {
                                                                            "code": {
                                                                                "type": "integer",
                                                                                "minimum": 1000
                                                                            },
                                                                            "message": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "uniqueItems": true
                                                                    },
                                                                    "example": []
                                                                }
                                                            ],
                                                            "minLength": 1,
                                                            "example": [
                                                                {
                                                                    "code": 7003,
                                                                    "message": "No route for the URI"
                                                                }
                                                            ]
                                                        },
                                                        "messages": {
                                                            "allOf": [
                                                                {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                            "code",
                                                                            "message"
                                                                        ],
                                                                        "properties": {
                                                                            "code": {
                                                                                "type": "integer",
                                                                                "minimum": 1000
                                                                            },
                                                                            "message": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "uniqueItems": true
                                                                    },
                                                                    "example": []
                                                                }
                                                            ],
                                                            "example": []
                                                        },
                                                        "result": {
                                                            "type": "null",
                                                            "enum": [
                                                                null
                                                            ],
                                                            "example": null
                                                        }
                                                    }
                                                }
                                            ],
                                            "definitions": {
                                                "messages": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                }
                                            }
                                        },
                                        {
                                            "properties": {
                                                "result": {
                                                    "type": [
                                                        "object",
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "properties": {
                                        "result": {
                                            "type": "object",
                                            "cfRecurse": ""
                                        }
                                    }
                                }
                            ]
                        },
                        "cfOwnership": "ssl",
                        "cfPlanAvailability": {
                            "free": false,
                            "pro": false,
                            "business": false,
                            "enterprise": true
                        },
                        "cfPermissionsRequired": {
                            "enum": [
                                "#ssl:edit"
                            ]
                        }
                    },
                    {
                        "title": "Get Keyless SSL Configuration",
                        "description": "Get details for one Keyless SSL configuration",
                        "rel": "self",
                        "href": "zones/{#/definitions/zone_identifier}/keyless_certificates/{#/definitions/identifier}",
                        "method": "GET",
                        "targetSchema": {
                            "allOf": [
                                {
                                    "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                                    "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                    "description": "Schema for an API response from Cloudflare that contains a single result object",
                                    "type": "object",
                                    "allOf": [
                                        {
                                            "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                            "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                            "description": "Common schema for all Cloudflare v4 API responses",
                                            "type": "object",
                                            "required": [
                                                "success",
                                                "errors",
                                                "messages",
                                                "result"
                                            ],
                                            "oneOf": [
                                                {
                                                    "$comment": "This subschema describes successful responses",
                                                    "properties": {
                                                        "success": {
                                                            "description": "Whether the API call was successful or not",
                                                            "type": "boolean",
                                                            "enum": [
                                                                true
                                                            ],
                                                            "example": true
                                                        },
                                                        "errors": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        },
                                                        "messages": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        },
                                                        "result": {
                                                            "type": [
                                                                "object",
                                                                "array",
                                                                "string"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "$comment": "This subschema describes failure responses",
                                                    "properties": {
                                                        "success": {
                                                            "description": "Whether the API call was successful or not",
                                                            "type": "boolean",
                                                            "enum": [
                                                                false
                                                            ],
                                                            "example": false
                                                        },
                                                        "errors": {
                                                            "allOf": [
                                                                {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                            "code",
                                                                            "message"
                                                                        ],
                                                                        "properties": {
                                                                            "code": {
                                                                                "type": "integer",
                                                                                "minimum": 1000
                                                                            },
                                                                            "message": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "uniqueItems": true
                                                                    },
                                                                    "example": []
                                                                }
                                                            ],
                                                            "minLength": 1,
                                                            "example": [
                                                                {
                                                                    "code": 7003,
                                                                    "message": "No route for the URI"
                                                                }
                                                            ]
                                                        },
                                                        "messages": {
                                                            "allOf": [
                                                                {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                            "code",
                                                                            "message"
                                                                        ],
                                                                        "properties": {
                                                                            "code": {
                                                                                "type": "integer",
                                                                                "minimum": 1000
                                                                            },
                                                                            "message": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "uniqueItems": true
                                                                    },
                                                                    "example": []
                                                                }
                                                            ],
                                                            "example": []
                                                        },
                                                        "result": {
                                                            "type": "null",
                                                            "enum": [
                                                                null
                                                            ],
                                                            "example": null
                                                        }
                                                    }
                                                }
                                            ],
                                            "definitions": {
                                                "messages": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                }
                                            }
                                        },
                                        {
                                            "properties": {
                                                "result": {
                                                    "type": [
                                                        "object",
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "properties": {
                                        "result": {
                                            "type": "object",
                                            "cfRecurse": ""
                                        }
                                    }
                                }
                            ]
                        },
                        "cfOwnership": "ssl",
                        "cfPlanAvailability": {
                            "free": false,
                            "pro": false,
                            "business": false,
                            "enterprise": true
                        },
                        "cfPermissionsRequired": {
                            "enum": [
                                "#ssl:read"
                            ]
                        }
                    },
                    {
                        "title": "Edit Keyless SSL Configuration",
                        "description": "This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port,certificate,enabled",
                        "rel": "self",
                        "href": "zones/{#/definitions/zone_identifier}/keyless_certificates/{#/definitions/identifier}",
                        "method": "PATCH",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "host": {
                                    "type": "string",
                                    "pattern": "hostname_or_ip",
                                    "description": "The keyless SSL name",
                                    "maxLength": 253,
                                    "example": "example.com"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The keyless SSL name",
                                    "maxLength": 180,
                                    "readOnly": true,
                                    "example": "example.com Keyless SSL"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "The keyless SSL port used to commmunicate between Cloudflare and the client's Keyless SSL server",
                                    "maxLength": 65535,
                                    "default": 24008,
                                    "example": 24008
                                },
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Whether or not the Keyless SSL is on or off",
                                    "readOnly": true,
                                    "example": false
                                }
                            }
                        },
                        "targetSchema": {
                            "allOf": [
                                {
                                    "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                                    "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                    "description": "Schema for an API response from Cloudflare that contains a single result object",
                                    "type": "object",
                                    "allOf": [
                                        {
                                            "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                            "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                            "description": "Common schema for all Cloudflare v4 API responses",
                                            "type": "object",
                                            "required": [
                                                "success",
                                                "errors",
                                                "messages",
                                                "result"
                                            ],
                                            "oneOf": [
                                                {
                                                    "$comment": "This subschema describes successful responses",
                                                    "properties": {
                                                        "success": {
                                                            "description": "Whether the API call was successful or not",
                                                            "type": "boolean",
                                                            "enum": [
                                                                true
                                                            ],
                                                            "example": true
                                                        },
                                                        "errors": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        },
                                                        "messages": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        },
                                                        "result": {
                                                            "type": [
                                                                "object",
                                                                "array",
                                                                "string"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "$comment": "This subschema describes failure responses",
                                                    "properties": {
                                                        "success": {
                                                            "description": "Whether the API call was successful or not",
                                                            "type": "boolean",
                                                            "enum": [
                                                                false
                                                            ],
                                                            "example": false
                                                        },
                                                        "errors": {
                                                            "allOf": [
                                                                {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                            "code",
                                                                            "message"
                                                                        ],
                                                                        "properties": {
                                                                            "code": {
                                                                                "type": "integer",
                                                                                "minimum": 1000
                                                                            },
                                                                            "message": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "uniqueItems": true
                                                                    },
                                                                    "example": []
                                                                }
                                                            ],
                                                            "minLength": 1,
                                                            "example": [
                                                                {
                                                                    "code": 7003,
                                                                    "message": "No route for the URI"
                                                                }
                                                            ]
                                                        },
                                                        "messages": {
                                                            "allOf": [
                                                                {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                            "code",
                                                                            "message"
                                                                        ],
                                                                        "properties": {
                                                                            "code": {
                                                                                "type": "integer",
                                                                                "minimum": 1000
                                                                            },
                                                                            "message": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "uniqueItems": true
                                                                    },
                                                                    "example": []
                                                                }
                                                            ],
                                                            "example": []
                                                        },
                                                        "result": {
                                                            "type": "null",
                                                            "enum": [
                                                                null
                                                            ],
                                                            "example": null
                                                        }
                                                    }
                                                }
                                            ],
                                            "definitions": {
                                                "messages": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                }
                                            }
                                        },
                                        {
                                            "properties": {
                                                "result": {
                                                    "type": [
                                                        "object",
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "properties": {
                                        "result": {
                                            "type": "object",
                                            "cfRecurse": ""
                                        }
                                    }
                                }
                            ]
                        },
                        "cfOwnership": "ssl",
                        "cfPlanAvailability": {
                            "free": false,
                            "pro": false,
                            "business": false,
                            "enterprise": true
                        },
                        "cfPermissionsRequired": {
                            "enum": [
                                "#ssl:edit"
                            ]
                        }
                    },
                    {
                        "title": "Delete Keyless SSL Configuration",
                        "rel": "self",
                        "href": "zones/{#/definitions/zone_identifier}/keyless_certificates/{#/definitions/identifier}",
                        "method": "DELETE",
                        "targetSchema": {
                            "allOf": [
                                {
                                    "id": "https://api.cloudflare.com/schemas/v4/common/api-response-single.json",
                                    "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                    "description": "Schema for an API response from Cloudflare that contains a single result object",
                                    "type": "object",
                                    "allOf": [
                                        {
                                            "id": "https://api.cloudflare.com/schemas/v4/common/api-response-common.json",
                                            "$schema": "http://json-schema.org/draft-04/hyper-schema#",
                                            "description": "Common schema for all Cloudflare v4 API responses",
                                            "type": "object",
                                            "required": [
                                                "success",
                                                "errors",
                                                "messages",
                                                "result"
                                            ],
                                            "oneOf": [
                                                {
                                                    "$comment": "This subschema describes successful responses",
                                                    "properties": {
                                                        "success": {
                                                            "description": "Whether the API call was successful or not",
                                                            "type": "boolean",
                                                            "enum": [
                                                                true
                                                            ],
                                                            "example": true
                                                        },
                                                        "errors": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        },
                                                        "messages": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "required": [
                                                                    "code",
                                                                    "message"
                                                                ],
                                                                "properties": {
                                                                    "code": {
                                                                        "type": "integer",
                                                                        "minimum": 1000
                                                                    },
                                                                    "message": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "uniqueItems": true
                                                            },
                                                            "example": []
                                                        },
                                                        "result": {
                                                            "type": [
                                                                "object",
                                                                "array",
                                                                "string"
                                                            ]
                                                        }
                                                    }
                                                },
                                                {
                                                    "$comment": "This subschema describes failure responses",
                                                    "properties": {
                                                        "success": {
                                                            "description": "Whether the API call was successful or not",
                                                            "type": "boolean",
                                                            "enum": [
                                                                false
                                                            ],
                                                            "example": false
                                                        },
                                                        "errors": {
                                                            "allOf": [
                                                                {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                            "code",
                                                                            "message"
                                                                        ],
                                                                        "properties": {
                                                                            "code": {
                                                                                "type": "integer",
                                                                                "minimum": 1000
                                                                            },
                                                                            "message": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "uniqueItems": true
                                                                    },
                                                                    "example": []
                                                                }
                                                            ],
                                                            "minLength": 1,
                                                            "example": [
                                                                {
                                                                    "code": 7003,
                                                                    "message": "No route for the URI"
                                                                }
                                                            ]
                                                        },
                                                        "messages": {
                                                            "allOf": [
                                                                {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "required": [
                                                                            "code",
                                                                            "message"
                                                                        ],
                                                                        "properties": {
                                                                            "code": {
                                                                                "type": "integer",
                                                                                "minimum": 1000
                                                                            },
                                                                            "message": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "uniqueItems": true
                                                                    },
                                                                    "example": []
                                                                }
                                                            ],
                                                            "example": []
                                                        },
                                                        "result": {
                                                            "type": "null",
                                                            "enum": [
                                                                null
                                                            ],
                                                            "example": null
                                                        }
                                                    }
                                                }
                                            ],
                                            "definitions": {
                                                "messages": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "minimum": 1000
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "uniqueItems": true
                                                    },
                                                    "example": []
                                                }
                                            }
                                        },
                                        {
                                            "properties": {
                                                "result": {
                                                    "type": [
                                                        "object",
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "properties": {
                                        "result": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "description": "Keyless certificate identifier tag",
                                                    "type": "string",
                                                    "maxLength": 32,
                                                    "readOnly": true,
                                                    "example": "4d2844d2ce78891c34d0b6c0535a291e"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        },
                        "cfOwnership": "ssl",
                        "cfPlanAvailability": {
                            "free": false,
                            "pro": false,
                            "business": false,
                            "enterprise": true
                        },
                        "cfPermissionsRequired": {
                            "enum": [
                                "#ssl:edit"
                            ]
                        }
                    }
                ]
            }
        },
        "required_props": [
            "id",
            "hosts",
            "issuer",
            "signature",
            "status",
            "bundle_method",
            "zone_id",
            "uploaded_on",
            "modified_on",
            "expires_on",
            "priority"
        ],
        "optional_props": [
            "geo_restrictions",
            "keyless_server"
        ],
        "objects": [],
        "example": "{\n  \"id\": \"2458ce5a-0c35-4c7f-82c7-8e9487d3ff60\",\n  \"hosts\": [\n    \"example.com\"\n  ],\n  \"issuer\": \"GlobalSign\",\n  \"signature\": \"SHA256WithRSA\",\n  \"status\": \"active\",\n  \"bundle_method\": \"ubiquitous\",\n  \"geo_restrictions\": {\n    \"label\": \"us\"\n  },\n  \"zone_id\": \"023e105f4ecef8ad9ca31a8372d0c353\",\n  \"uploaded_on\": \"2014-01-01T05:20:00Z\",\n  \"modified_on\": \"2014-01-01T05:20:00Z\",\n  \"expires_on\": \"2016-01-01T05:20:00Z\",\n  \"priority\": 1\n}",
        "title": "Custom SSL for a Zone",
        "description": "Custom SSL certificate for a zone"
    },
    "_generated_on": "2022-06-23T18:27:26.219314",
    "_generated_from": "https://api.cloudflare.com/apidocs-static/app-15eee93638a35d88ae02.js"
}